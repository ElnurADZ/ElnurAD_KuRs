// <auto-generated />
using System;
using Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(AUTOMAContext))]
    partial class AUTOMAContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.36")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.Ad", b =>
                {
                    b.Property<int>("IdAds")
                        .HasColumnType("int")
                        .HasColumnName("ID_ADS");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<string>("TypeAds")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("Type_ADS")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.HasKey("IdAds")
                        .HasName("Unique_Identifier50");

                    b.ToTable("ADS", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Client", b =>
                {
                    b.Property<int>("IdClients")
                        .HasColumnType("int")
                        .HasColumnName("ID_Clients");

                    b.Property<bool?>("Blocked")
                        .HasColumnType("bit")
                        .HasColumnName("blocked");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .IsFixedLength();

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("FIO")
                        .IsFixedLength();

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("Phone_number")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.HasKey("IdClients")
                        .HasName("Unique_Identifier2");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Property<int>("IdDepartament")
                        .HasColumnType("int")
                        .HasColumnName("ID_Departament");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .IsFixedLength();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<int?>("EmployeCount")
                        .HasColumnType("int")
                        .HasColumnName("Employe_count");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.HasKey("IdDepartament")
                        .HasName("Unique_Identifier1");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Employee", b =>
                {
                    b.Property<int>("IdEmloyee")
                        .HasColumnType("int")
                        .HasColumnName("ID_Emloyee");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("FIO")
                        .IsFixedLength();

                    b.Property<int>("IdOffice")
                        .HasColumnType("int")
                        .HasColumnName("ID_Office");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("Phone_number")
                        .IsFixedLength();

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.HasKey("IdEmloyee")
                        .HasName("Unique_Identifier4");

                    b.HasIndex(new[] { "IdOffice" }, "IX_Relationship33");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Feedback", b =>
                {
                    b.Property<int>("IdFeedback")
                        .HasColumnType("int")
                        .HasColumnName("ID_Feedback");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<int?>("IdClients")
                        .HasColumnType("int")
                        .HasColumnName("ID_Clients");

                    b.Property<bool>("Recommendation")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("char(1000)")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.HasKey("IdFeedback")
                        .HasName("Unique_Identifier5");

                    b.HasIndex(new[] { "IdClients" }, "Relationship98");

                    b.ToTable("Feedback", (string)null);
                });

            modelBuilder.Entity("Domain.Models.MethodConnection", b =>
                {
                    b.Property<int>("IdOffice")
                        .HasColumnType("int")
                        .HasColumnName("ID_Office");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .IsFixedLength();

                    b.Property<string>("Facebook")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .IsFixedLength();

                    b.Property<string>("Instagram")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .IsFixedLength();

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("Phone_number")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.Property<string>("Vk")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("VK")
                        .IsFixedLength();

                    b.HasKey("IdOffice")
                        .HasName("Unique_Identifier87");

                    b.ToTable("Method_connection", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Office", b =>
                {
                    b.Property<int>("IdOffice")
                        .HasColumnType("int")
                        .HasColumnName("ID_Office");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .IsFixedLength();

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .IsFixedLength();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<int?>("EmployeCount")
                        .HasColumnType("int")
                        .HasColumnName("Employe_count");

                    b.Property<int>("IdDepartament")
                        .HasColumnType("int")
                        .HasColumnName("ID_Departament");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.HasKey("IdOffice")
                        .HasName("Unique_Identifier3");

                    b.HasIndex(new[] { "IdDepartament" }, "Relationship99");

                    b.ToTable("Office", (string)null);
                });

            modelBuilder.Entity("Domain.Models.OfficeAd", b =>
                {
                    b.Property<int>("IdAdsOffice")
                        .HasColumnType("int")
                        .HasColumnName("ID_ADS_Office");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .IsFixedLength();

                    b.Property<string>("AdsCoordinates")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("ADS_Coordinates");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<int>("IdAds")
                        .HasColumnType("int")
                        .HasColumnName("ID_ADS");

                    b.Property<int>("IdOffice")
                        .HasColumnType("int")
                        .HasColumnName("ID_Office");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.HasKey("IdAdsOffice")
                        .HasName("Unique_Identifier76");

                    b.HasIndex(new[] { "IdAds" }, "IX_Relationship30_ADS");

                    b.HasIndex(new[] { "IdOffice" }, "IX_Relationship30_Office");

                    b.ToTable("Office_ADS", (string)null);
                });

            modelBuilder.Entity("Domain.Models.OfficeCapital", b =>
                {
                    b.Property<int>("IdOfficeCapital")
                        .HasColumnType("int")
                        .HasColumnName("ID_Office_capital");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<int?>("IdOffice")
                        .HasColumnType("int")
                        .HasColumnName("ID_Office");

                    b.Property<double>("NewCapital")
                        .HasColumnType("float")
                        .HasColumnName("New_capital");

                    b.Property<double>("OldCapital")
                        .HasColumnType("float")
                        .HasColumnName("Old_Capital");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.HasKey("IdOfficeCapital")
                        .HasName("Unique_Identifier6");

                    b.HasIndex(new[] { "IdOffice" }, "IX_Relationship47");

                    b.ToTable("Office_capital", (string)null);
                });

            modelBuilder.Entity("Domain.Models.OrderClient", b =>
                {
                    b.Property<int>("IdOrderClients")
                        .HasColumnType("int")
                        .HasColumnName("ID_Order_Clients");

                    b.Property<double>("ConvenientPrice")
                        .HasColumnType("float")
                        .HasColumnName("Convenient_price");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<int>("IdClients")
                        .HasColumnType("int")
                        .HasColumnName("ID_Clients");

                    b.Property<int>("IdOffice")
                        .HasColumnType("int")
                        .HasColumnName("ID_Office");

                    b.Property<bool?>("Paid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Term")
                        .HasColumnType("date");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("char(1000)")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.Property<string>("Wish")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .IsFixedLength();

                    b.HasKey("IdOrderClients")
                        .HasName("Unique_Identifier7");

                    b.HasIndex(new[] { "IdClients" }, "IX_Relationship36");

                    b.HasIndex(new[] { "IdOffice" }, "IX_Relationship37");

                    b.ToTable("Order_Clients", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Partner", b =>
                {
                    b.Property<int>("IdPartners")
                        .HasColumnType("int")
                        .HasColumnName("ID_Partners");

                    b.Property<string>("CompanyActivity")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("char(1000)")
                        .HasColumnName("Company_activity")
                        .IsFixedLength();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("char(50)")
                        .IsFixedLength();

                    b.Property<string>("NameCompany")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("char(100)")
                        .HasColumnName("Name_Company")
                        .IsFixedLength();

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("char(30)")
                        .HasColumnName("Phone_number")
                        .IsFixedLength();

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.HasKey("IdPartners");

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("Domain.Models.PaymentsClient", b =>
                {
                    b.Property<int>("IdOrderClients")
                        .HasColumnType("int")
                        .HasColumnName("ID_Order_Clients");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("char(1000)")
                        .IsFixedLength();

                    b.Property<int>("IdClients")
                        .HasColumnType("int")
                        .HasColumnName("ID_Clients");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.HasKey("IdOrderClients")
                        .HasName("Unique_Identifier8");

                    b.HasIndex(new[] { "IdOrderClients" }, "IX_Relationship43");

                    b.ToTable("Payments_Clients", (string)null);
                });

            modelBuilder.Entity("Domain.Models.ReportClient", b =>
                {
                    b.Property<int>("IdReportClient")
                        .HasColumnType("int")
                        .HasColumnName("ID_Report_Client");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<int?>("IdFeedback")
                        .HasColumnType("int")
                        .HasColumnName("ID_Feedback");

                    b.Property<int?>("IdOffice")
                        .HasColumnType("int")
                        .HasColumnName("ID_Office");

                    b.Property<int?>("IdOfficeCapital")
                        .HasColumnType("int")
                        .HasColumnName("ID_Office_capital");

                    b.Property<int>("IdOrderClients")
                        .HasColumnType("int")
                        .HasColumnName("ID_Order_Clients");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.HasKey("IdReportClient")
                        .HasName("Unique_Identifier9");

                    b.HasIndex(new[] { "IdOrderClients" }, "IX_Relationship29");

                    b.HasIndex(new[] { "IdFeedback" }, "IX_Relationship42");

                    b.HasIndex(new[] { "IdOfficeCapital" }, "IX_Relationship49");

                    b.HasIndex(new[] { "IdOffice" }, "IX_Relationship50");

                    b.ToTable("Report_Clients", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Salary", b =>
                {
                    b.Property<int>("IdSalary")
                        .HasColumnType("int")
                        .HasColumnName("ID_Salary");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<int?>("IdEmloyee")
                        .HasColumnType("int")
                        .HasColumnName("ID_Emloyee");

                    b.Property<double>("Money")
                        .HasColumnType("float");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("IdSalary")
                        .HasName("Unique_Identifier60");

                    b.HasIndex(new[] { "IdEmloyee" }, "IX_Relationship46");

                    b.ToTable("Salary", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Vacation", b =>
                {
                    b.Property<int>("IdVacations")
                        .HasColumnType("int")
                        .HasColumnName("ID_Vacations");

                    b.Property<DateTime>("BeginningVacations")
                        .HasColumnType("date")
                        .HasColumnName("Beginning_Vacations");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Deleted_at");

                    b.Property<DateTime>("EndVacations")
                        .HasColumnType("date")
                        .HasColumnName("End_Vacations");

                    b.Property<int?>("IdEmloyee")
                        .HasColumnType("int")
                        .HasColumnName("ID_Emloyee");

                    b.Property<int>("Remain")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.Property<int>("Used")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("IdVacations")
                        .HasName("Unique_Identifier70");

                    b.HasIndex(new[] { "IdEmloyee" }, "IX_Relationship45");

                    b.ToTable("Vacations");
                });

            modelBuilder.Entity("OfficePartner", b =>
                {
                    b.Property<int>("IdOffice")
                        .HasColumnType("int")
                        .HasColumnName("ID_Office");

                    b.Property<int>("IdPartners")
                        .HasColumnType("int")
                        .HasColumnName("ID_Partners");

                    b.HasKey("IdOffice", "IdPartners");

                    b.HasIndex("IdPartners");

                    b.ToTable("Office/Partners", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Employee", b =>
                {
                    b.HasOne("Domain.Models.Office", "IdOfficeNavigation")
                        .WithMany("Employees")
                        .HasForeignKey("IdOffice")
                        .IsRequired()
                        .HasConstraintName("Relationship33");

                    b.Navigation("IdOfficeNavigation");
                });

            modelBuilder.Entity("Domain.Models.Feedback", b =>
                {
                    b.HasOne("Domain.Models.Client", "IdClientsNavigation")
                        .WithMany("Feedbacks")
                        .HasForeignKey("IdClients")
                        .HasConstraintName("Relationship98");

                    b.Navigation("IdClientsNavigation");
                });

            modelBuilder.Entity("Domain.Models.MethodConnection", b =>
                {
                    b.HasOne("Domain.Models.Office", "IdOfficeNavigation")
                        .WithOne("MethodConnection")
                        .HasForeignKey("Domain.Models.MethodConnection", "IdOffice")
                        .IsRequired()
                        .HasConstraintName("Relationship87");

                    b.Navigation("IdOfficeNavigation");
                });

            modelBuilder.Entity("Domain.Models.Office", b =>
                {
                    b.HasOne("Domain.Models.Department", "IdDepartamentNavigation")
                        .WithMany("Offices")
                        .HasForeignKey("IdDepartament")
                        .IsRequired()
                        .HasConstraintName("Relationship99");

                    b.Navigation("IdDepartamentNavigation");
                });

            modelBuilder.Entity("Domain.Models.OfficeAd", b =>
                {
                    b.HasOne("Domain.Models.Ad", "IdAdsNavigation")
                        .WithMany("OfficeAds")
                        .HasForeignKey("IdAds")
                        .IsRequired()
                        .HasConstraintName("Relationship74");

                    b.HasOne("Domain.Models.Office", "IdOfficeNavigation")
                        .WithMany("OfficeAds")
                        .HasForeignKey("IdOffice")
                        .IsRequired()
                        .HasConstraintName("Relationship76");

                    b.Navigation("IdAdsNavigation");

                    b.Navigation("IdOfficeNavigation");
                });

            modelBuilder.Entity("Domain.Models.OfficeCapital", b =>
                {
                    b.HasOne("Domain.Models.Office", "IdOfficeNavigation")
                        .WithMany("OfficeCapitals")
                        .HasForeignKey("IdOffice")
                        .HasConstraintName("Relationship47");

                    b.Navigation("IdOfficeNavigation");
                });

            modelBuilder.Entity("Domain.Models.OrderClient", b =>
                {
                    b.HasOne("Domain.Models.Client", "IdClientsNavigation")
                        .WithMany("OrderClients")
                        .HasForeignKey("IdClients")
                        .IsRequired()
                        .HasConstraintName("Relationship36");

                    b.HasOne("Domain.Models.Office", "IdOfficeNavigation")
                        .WithMany("OrderClients")
                        .HasForeignKey("IdOffice")
                        .IsRequired()
                        .HasConstraintName("Relationship37");

                    b.Navigation("IdClientsNavigation");

                    b.Navigation("IdOfficeNavigation");
                });

            modelBuilder.Entity("Domain.Models.PaymentsClient", b =>
                {
                    b.HasOne("Domain.Models.OrderClient", "IdOrderClientsNavigation")
                        .WithOne("PaymentsClient")
                        .HasForeignKey("Domain.Models.PaymentsClient", "IdOrderClients")
                        .IsRequired()
                        .HasConstraintName("Relationship43");

                    b.Navigation("IdOrderClientsNavigation");
                });

            modelBuilder.Entity("Domain.Models.ReportClient", b =>
                {
                    b.HasOne("Domain.Models.Feedback", "IdFeedbackNavigation")
                        .WithMany("ReportClients")
                        .HasForeignKey("IdFeedback")
                        .HasConstraintName("Relationship42");

                    b.HasOne("Domain.Models.Office", "IdOfficeNavigation")
                        .WithMany("ReportClients")
                        .HasForeignKey("IdOffice")
                        .HasConstraintName("Relationship50");

                    b.HasOne("Domain.Models.OfficeCapital", "IdOfficeCapitalNavigation")
                        .WithMany("ReportClients")
                        .HasForeignKey("IdOfficeCapital")
                        .HasConstraintName("Relationship49");

                    b.HasOne("Domain.Models.OrderClient", "IdOrderClientsNavigation")
                        .WithMany("ReportClients")
                        .HasForeignKey("IdOrderClients")
                        .IsRequired()
                        .HasConstraintName("Relationship29");

                    b.Navigation("IdFeedbackNavigation");

                    b.Navigation("IdOfficeCapitalNavigation");

                    b.Navigation("IdOfficeNavigation");

                    b.Navigation("IdOrderClientsNavigation");
                });

            modelBuilder.Entity("Domain.Models.Salary", b =>
                {
                    b.HasOne("Domain.Models.Employee", "IdEmloyeeNavigation")
                        .WithMany("Salaries")
                        .HasForeignKey("IdEmloyee")
                        .HasConstraintName("Relationship46");

                    b.Navigation("IdEmloyeeNavigation");
                });

            modelBuilder.Entity("Domain.Models.Vacation", b =>
                {
                    b.HasOne("Domain.Models.Employee", "IdEmloyeeNavigation")
                        .WithMany("Vacations")
                        .HasForeignKey("IdEmloyee")
                        .HasConstraintName("Relationship45");

                    b.Navigation("IdEmloyeeNavigation");
                });

            modelBuilder.Entity("OfficePartner", b =>
                {
                    b.HasOne("Domain.Models.Office", null)
                        .WithMany()
                        .HasForeignKey("IdOffice")
                        .IsRequired()
                        .HasConstraintName("Relationship40");

                    b.HasOne("Domain.Models.Partner", null)
                        .WithMany()
                        .HasForeignKey("IdPartners")
                        .IsRequired()
                        .HasConstraintName("Relationship41");
                });

            modelBuilder.Entity("Domain.Models.Ad", b =>
                {
                    b.Navigation("OfficeAds");
                });

            modelBuilder.Entity("Domain.Models.Client", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("OrderClients");
                });

            modelBuilder.Entity("Domain.Models.Department", b =>
                {
                    b.Navigation("Offices");
                });

            modelBuilder.Entity("Domain.Models.Employee", b =>
                {
                    b.Navigation("Salaries");

                    b.Navigation("Vacations");
                });

            modelBuilder.Entity("Domain.Models.Feedback", b =>
                {
                    b.Navigation("ReportClients");
                });

            modelBuilder.Entity("Domain.Models.Office", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("MethodConnection");

                    b.Navigation("OfficeAds");

                    b.Navigation("OfficeCapitals");

                    b.Navigation("OrderClients");

                    b.Navigation("ReportClients");
                });

            modelBuilder.Entity("Domain.Models.OfficeCapital", b =>
                {
                    b.Navigation("ReportClients");
                });

            modelBuilder.Entity("Domain.Models.OrderClient", b =>
                {
                    b.Navigation("PaymentsClient");

                    b.Navigation("ReportClients");
                });
#pragma warning restore 612, 618
        }
    }
}
